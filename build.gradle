buildscript {
    ext.repositoryName = project.name
    ext.versionsProperties = new Properties()
    file("versions.properties").withInputStream { versionsProperties.load(it) }
    
    repositories {
        google()
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versionsProperties.kotlin}"
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "digital.wup:android-maven-publish:3.6.2"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}
apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.android.library'

group 'com.lightningkite'
version versionsProperties.getProperty(repositoryName)

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        warning('InvalidPackage', 'NewApi')
    }
}


repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://dl.bintray.com/lightningkite/com.lightningkite.krosslin' }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')
        fromPreset(presets.jvm, 'javafx')
        fromPreset(presets.jvm, 'jvmVirtual')
        fromPreset(presets.js, 'js')
//        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
//            fromPreset(presets.iosX64, 'iosx64')
//            fromPreset(presets.iosArm64, 'ios')
//        }
    }
    android {
        publishLibraryVariants("release")
    }
    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'

                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versionsProperties.kotlinx_coroutines}"

                api "com.lightningkite:kommon-metadata:${versionsProperties.kommon}"
                api "com.lightningkite:lokalize-metadata:${versionsProperties.lokalize}"
                api "com.lightningkite:reacktive-metadata:${versionsProperties.reacktive}"
                api "com.lightningkite:recktangle-metadata:${versionsProperties.recktangle}"
            }
        }
        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmVirtualMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versionsProperties.kotlinx_coroutines}"

                api "com.lightningkite:kommon-jvm:${versionsProperties.kommon}"
                api "com.lightningkite:lokalize-jvm:${versionsProperties.lokalize}"
                api "com.lightningkite:reacktive-jvm:${versionsProperties.reacktive}"
                api "com.lightningkite:recktangle-jvm:${versionsProperties.recktangle}"
            }
        }
        jvmVirtualTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        javafxMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

                api 'com.jfoenix:jfoenix:9.0.3' // Java 9
                api 'org.apache.xmlgraphics:batik-dom:1.10'
                api 'org.apache.xmlgraphics:batik-anim:1.10'
                api 'org.apache.xmlgraphics:batik-bridge:1.10'
                api 'org.apache.xmlgraphics:batik-transcoder:1.10'
                api 'xalan:xalan:2.7.2'
                api 'org.apache.logging.log4j:log4j-api:2.5'

                api 'org.apache.xmlgraphics:xmlgraphics-commons:2.1'
                api 'org.apache.logging.log4j:log4j-core:2.5'

                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versionsProperties.kotlinx_coroutines}"

                api "com.lightningkite:kommon-jvm:${versionsProperties.kommon}"
                api "com.lightningkite:lokalize-jvm:${versionsProperties.lokalize}"
                api "com.lightningkite:reacktive-jvm:${versionsProperties.reacktive}"
                api "com.lightningkite:recktangle-jvm:${versionsProperties.recktangle}"
            }
        }
        javafxTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        androidMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versionsProperties.kotlinx_coroutines}"
                api 'com.squareup.okhttp3:okhttp:3.11.0'

                def compatVersion = '27.1.1'
                api "com.android.support:appcompat-v7:${compatVersion}"
                api "com.android.support:cardview-v7:${compatVersion}"
                api "com.android.support:gridlayout-v7:${compatVersion}"
                api "com.android.support:recyclerview-v7:${compatVersion}"
                api "com.android.support:design:${compatVersion}"

                api "com.lightningkite:kommon-jvm:${versionsProperties.kommon}"
                api "com.lightningkite:lokalize-jvm:${versionsProperties.lokalize}"
                api "com.lightningkite:reacktive-jvm:${versionsProperties.reacktive}"
                api "com.lightningkite:recktangle-jvm:${versionsProperties.recktangle}"
            }
        }
        androidTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'

                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:${versionsProperties.kotlinx_coroutines}"


                api "com.lightningkite:kommon-js:${versionsProperties.kommon}"
                api "com.lightningkite:lokalize-js:${versionsProperties.lokalize}"
                api "com.lightningkite:reacktive-js:${versionsProperties.reacktive}"
                api "com.lightningkite:recktangle-js:${versionsProperties.recktangle}"

            }
        }
        jsTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }

//        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
//            iosMain {
//                dependencies {
//                }
//            }
//            iosTest {
//                dependencies {
//                    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versionsProperties.kotlinx_coroutines}'
//                }
//            }
//            iosx64Main {
//                dependencies {
//                    kotlin.srcDir('src/iosMain/kotlin')
//                }
//            }
//            iosx64Test {
//                dependencies {
//                    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versionsProperties.kotlinx_coroutines}'
//                    kotlin.srcDir('src/iosTest/kotlin')
//                }
//            }
//        }
    }
}
tasks.withType(compileKotlinJs.getClass()) {
    kotlinOptions {
        moduleKind = "umd"
        sourceMap = true
        metaInfo = true
    }
}

//if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
//    task iosTest {
//        def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
//        dependsOn 'linkTestDebugExecutableIosx64'
//        group = JavaBasePlugin.VERIFICATION_GROUP
//        description = "Runs tests for target 'ios' on an iOS simulator"
//
//        doLast {
//            def binary = kotlin.targets.iosx64.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
//            exec {
//                commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
//            }
//        }
//    }
//    tasks.check.dependsOn(tasks.iosTest)
//}


apply from: rootProject.file("gradle/publish.gradle")
